{"version":3,"file":"moneybutton.client.cjs.js","sources":["../src/auth-error.js","../src/rest-error.js","../src/get-money-button-client.js","../src/index.js"],"sourcesContent":["/**\n * Authentication API error.\n */\nexport default class AuthError {\n  /**\n   * @param {string} title - Error title.\n   * @param {string} detail - Error detail.\n   */\n  constructor (title, detail) {\n    this.title = title\n    this.detail = detail\n    this.message = detail !== undefined ? detail : title\n  }\n}\n","/**\n * REST API error.\n */\nexport default class RestError {\n  /**\n   *\n   * @param {number} status - HTTP status code.\n   * @param {string} title - Error title.\n   * @param {string} detail - Error detail.\n   */\n  constructor (status, title, detail) {\n    this.status = status\n    this.title = title\n    this.detail = detail\n    this.message = detail !== undefined ? detail : title\n  }\n}\n","import {\n  toResourceObject,\n  toNewResourceObject,\n  fromResourceObject,\n  fromResourceObjectsOfType,\n  toJsonApiData,\n  toJsonApiDataIncluding,\n  fromJsonApiData,\n  jsonSerializers,\n  JsonDeserializer\n} from '@moneybutton/json-api'\nimport fetch from 'isomorphic-fetch'\nimport moment from 'moment'\nimport queryString from 'query-string'\nimport uuid from 'uuid'\n\nimport AuthError from './auth-error'\nimport RestError from './rest-error'\nimport sha256 from 'fast-sha256'\n\nconst MB_URL = 'https://www.moneybutton.com'\n\nconst LOGIN_PASSWORD_HMAC_KEY = 'yours login password'\n\nconst STORAGE_NAMESPACE = 'mb_js_client'\nconst OAUTH_REDIRECT_URI_KEY = [STORAGE_NAMESPACE, 'oauth_redirect_uri'].join(':')\nconst OAUTH_STATE_KEY = [STORAGE_NAMESPACE, 'oauth_state'].join(':')\nconst OAUTH_ACCESS_TOKEN_KEY = [STORAGE_NAMESPACE, 'oauth_access_token'].join(':')\nconst OAUTH_EXPIRATION_TIME_KEY = [STORAGE_NAMESPACE, 'oauth_expiration_time'].join(':')\nconst OAUTH_REFRESH_TOKEN_KEY = [STORAGE_NAMESPACE, 'oauth_refresh_token'].join(':')\nconst APP_REFRESH_STRATEGY = 'client_credentials'\nconst DEFAULT_REFRESH_STRATEGY = 'refresh_token'\n\nconst {\n  UserSerializer,\n  SwipePermissionSerializer,\n  AuthorizedPaymentSerializer\n} = jsonSerializers\n\n/**\n * @param {Storage} webStorage - Object conforming to the Storage Web API.\n * @param {Location} webLocation - Object conforming to the Location Web API.\n */\nexport default function getMoneyButtonClient (webStorage, webLocation) {\n  if (!webStorage) {\n    throw new Error('Missing required web storage object.')\n  }\n  if (!webLocation) {\n    throw new Error('Missing required web location object.')\n  }\n  /**\n   *\n   */\n  class MoneyButtonClient {\n    /**\n     * Creates an instance of Money Button for the given OAuth client.\n     *\n     * @param {string} clientId - OAuth client's identifier.\n     * @param {string} clientSecret - OAuth client's secret.\n     */\n    constructor (clientId, clientSecret = null, mbUrl = MB_URL) {\n      this.clientId = clientId\n      this.clientSecret = clientSecret\n      this.refreshStrategy = DEFAULT_REFRESH_STRATEGY\n      this.mbUrl = mbUrl\n      this._currentUser = null\n    }\n\n    /**\n     * Logs in the user with the given email and password.\n     *\n     * @param {string} email\n     * @param {string} password\n     * @returns {undefined}\n     */\n    async logIn (email, password) {\n      const loginPassword = await MoneyButtonClient._computeHmac256(\n        LOGIN_PASSWORD_HMAC_KEY,\n        password\n      )\n      this._clearCurrentUser()\n      await this._logIn(email, loginPassword)\n    }\n\n    /**\n     * Get tokens to log in as an app.\n     * It changes the internal state of the client.\n     */\n    async logInAsApp () {\n      await this._doClientCredentialsGrantAccessTokenRequest('application_access:write')\n      this._clearCurrentUser()\n      this.refreshStrategy = APP_REFRESH_STRATEGY\n    }\n\n    /**\n     * Logs in the user with the given email and login password.\n     *\n     * @private\n     * @param {string} email\n     * @param {string} password\n     * @returns {undefined}\n     */\n    async _logIn (email, loginPassword) {\n      if (await this.isLoggedIn()) {\n        await this.logOut()\n      }\n      await this._doResourceOwnerPasswordCredentialsGrantAccessTokenRequest(\n        email,\n        loginPassword,\n        'general_access:write'\n      )\n    }\n\n    async logError (data) {\n      await this._doPostRequest('/v2/log-data', data)\n    }\n\n    /**\n     * Determines whether a user is currently logged-in.\n     *\n     * @returns {boolean}\n     */\n    async isLoggedIn () {\n      const accessToken = await this.getValidAccessToken()\n      return accessToken !== null\n    }\n\n    /**\n     * Retrieves a valid access token for the currently logged-in user.\n     * Returns null if no user is currently logged-in.\n     *\n     * @returns {string|null}\n     */\n    async getValidAccessToken () {\n      let accessToken = this.getAccessToken()\n      if (\n        accessToken !== null &&\n        moment().isBefore(moment(this.getExpirationTime()))\n      ) {\n        return accessToken\n      }\n      if (this.refreshStrategy === APP_REFRESH_STRATEGY) {\n        await this.logInAsApp()\n        return this.getAccessToken()\n      } else {\n        const refreshToken = this.getRefreshToken()\n        if (refreshToken === null) {\n          return null\n        }\n        accessToken = null\n        try {\n          await this._doRefreshAccessTokenRequest(refreshToken)\n          accessToken = this.getAccessToken()\n        } catch (err) {\n          if (!(err instanceof AuthError)) {\n            throw err\n          }\n        }\n        return accessToken\n      }\n    }\n\n    /**\n     * Logs out the current logged-in user, if any.\n     */\n    async logOut () {\n      try {\n        if (this.getRefreshToken()) {\n          const accessToken = await this.getValidAccessToken()\n          if (accessToken) {\n            await fetch(`${this.mbUrl}/oauth/v1/revoke`, {\n              method: 'POST',\n              headers: {\n                authorization: `Bearer ${accessToken}`,\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({ refresh_token: this.getRefreshToken() })\n            })\n          }\n        }\n      } finally {\n        this._clearCurrentUser()\n        Array.from(Array(webStorage.length).keys()) // Generates a range of integers from 0 to webStorage.length\n          .map(i => webStorage.key(i))\n          .filter(key => key.startsWith('mb_wallet') || key.startsWith(STORAGE_NAMESPACE))\n          .forEach(key => webStorage.removeItem(key))\n      }\n    }\n\n    /**\n     * Create email change request.\n     *\n     * @param {string} email\n     */\n    async changeEmail (email, password) {\n      return this._doPutRequest('/v2/auth/email', { email, password })\n    }\n\n    /**\n     * Resend email verification.\n     *\n     * @param {string} email\n     */\n    async resendEmailVerification (email) {\n      return this._doPostRequest('/v2/auth/resend-email-verification', { email })\n    }\n\n    /**\n     * Resend email change request verification.\n     *\n     * @param {string} userId\n     */\n    async resendEmailChangeRequestVerification (userId) {\n      return this._doPostRequest('/v2/auth/resend-email-change-request-verification', { userId })\n    }\n\n    /**\n     * Email verification.\n     *\n     * @param {string} accessToken\n     */\n    async confirmEmailVerification (accessToken) {\n      const result = await this._doPostRequest(\n        '/v2/auth/confirm-email-verification',\n        {},\n        {},\n        accessToken\n      )\n      this._clearCurrentUser()\n\n      return result\n    }\n\n    async createReEncryptedWallet (encryptedMnemonic, walletId) {\n      const result = await this._doPostRequest(\n        '/v2/re-encrypted-wallets',\n        {\n          encryptedMnemonic,\n          walletId\n        }\n      )\n      return result\n    }\n\n    async getReEncryptedWallets () {\n      const result = await this._doGetRequest(\n        '/v2/re-encrypted-wallets'\n      )\n      return result\n    }\n\n    async getFeatureFlags () {\n      const result = await this._doGetRequest(\n        '/v2/feature-flags'\n      )\n      return result\n    }\n\n    /**\n     * Retrieves the currently logged user's identity.\n     *\n     * @returns {object}\n     */\n    async getIdentity () {\n      const json = await this._doGetRequest('/v1/auth/user_identity')\n      return fromResourceObject(fromJsonApiData(json), 'user_identities')\n    }\n\n    /**\n     * Returns an object with two keys:\n     * - loggedIn: a boolean indicating whether there is a currently logged-in user.\n     * - user: if loggedIn is true, this is an object with the user's attributes.\n     *\n     * @returns {object}\n     */\n    async whoAmI () {\n      const loggedIn = await this.isLoggedIn()\n      if (!loggedIn) {\n        return { loggedIn }\n      }\n      const currentUser = await this._getCurrentUser()\n      return { loggedIn, user: currentUser }\n    }\n\n    /**\n     * Changes the currently logged-in user's password.\n     *\n     * @param {string} password\n     * @param {string} encryptedMnemonic\n     * @param {string} xpub\n     * @param {string} language\n     * @returns {object}\n     */\n    async changePassword (\n      password,\n      encryptedMnemonic,\n      xpub,\n      language\n    ) {\n      const loginPassword = await MoneyButtonClient._computeHmac256(\n        LOGIN_PASSWORD_HMAC_KEY,\n        password\n      )\n      const body = toJsonApiDataIncluding(\n        toNewResourceObject('users', {\n          password: loginPassword\n        }),\n        [\n          toNewResourceObject('wallets', {\n            encryptedMnemonic,\n            xpub,\n            language\n          })\n        ]\n      )\n      const json = await this._doPostRequest('/v1/auth/password_change', body)\n      return fromResourceObject(fromJsonApiData(json), 'password_changes')\n    }\n\n    /**\n     * Resets the currently logged-in user's password by using the access token\n     * generated during the \"I forgot my password\" flow.\n     *\n     * @param {string} accessToken - auth API access token\n     * @param {string} password\n     * @param {string} encryptedMnemonic\n     * @param {string} xpub\n     * @param {boolean} forceCreate\n     * @param {string} walletLanguage\n     * @returns {object}\n     */\n    async resetPassword (\n      accessToken,\n      password,\n      encryptedMnemonic,\n      xpub,\n      forceCreate,\n      walletLanguage\n    ) {\n      const loginPassword = await MoneyButtonClient._computeHmac256(\n        LOGIN_PASSWORD_HMAC_KEY,\n        password\n      )\n      const body = toJsonApiDataIncluding(\n        toNewResourceObject('users', {\n          password: loginPassword\n        }),\n        [\n          toNewResourceObject('wallets', {\n            encryptedMnemonic,\n            xpub,\n            language: walletLanguage\n          })\n        ]\n      )\n      const query = forceCreate ? { forceCreate: 'true' } : {}\n      const json = await this._doPostRequest(\n        '/v1/auth/password_reset',\n        body,\n        query,\n        accessToken\n      )\n      this._clearCurrentUser()\n      return fromResourceObject(fromJsonApiData(json), 'password_resets')\n    }\n\n    /**\n     * Sends a password reset email to begin the \"I forgot my password\" flow.\n     *\n     * @param {string} email\n     * @returns {object}\n     */\n    async sendPasswordReset (email) {\n      if (await this.isLoggedIn()) {\n        await this.logOut()\n      }\n      await this._doClientCredentialsGrantAccessTokenRequest(\n        'auth.password_reset_email:write'\n      )\n      const attributes = { email }\n      const body = toJsonApiData(toNewResourceObject('users', attributes))\n      const json = await this._doPostRequest('/v1/auth/password_reset_email', body)\n      await this.logOut()\n      return fromResourceObject(fromJsonApiData(json), 'password_reset_emails')\n    }\n\n    /**\n     * Creates a new user account with the given email and password.\n     *\n     * @param {string} email\n     * @param {string} password\n     * @returns {object}\n     */\n    async signUp (name, email, password, receiveEmails, defaultCurrency, passwordAlreadySet) {\n      if (await this.isLoggedIn()) {\n        await this.logOut()\n      }\n\n      return this._doPostRequest(\n        '/v2/auth/signup',\n        {\n          name,\n          email,\n          receiveEmails,\n          defaultCurrency,\n          passwordAlreadySet,\n          password: await MoneyButtonClient._computeHmac256(LOGIN_PASSWORD_HMAC_KEY, password)\n        }\n      )\n    }\n\n    /**\n     * Delete user account.\n     */\n    async deleteAccount (password) {\n      await this._doPostRequest('/v2/auth/delete-account', { password })\n      await this.logOut()\n    }\n\n    async updateRefreshToken () {\n      const refreshToken = this.getRefreshToken()\n      if (refreshToken && refreshToken.split('.').length === 3) {\n        const { refreshToken: newRefreshToken } = await this._doPostRequest('/v1/auth/update_refresh_token', { refreshToken })\n        this.setRefreshToken(newRefreshToken)\n      }\n    }\n\n    async assertNewRefreshTokenVersion (onOldVersion) {\n      const refreshToken = this.getRefreshToken()\n      if (!refreshToken) {\n\n      } else if (refreshToken.split('.').length === 3) {\n        await this.logOut()\n        await onOldVersion()\n      }\n    }\n\n    /**\n     * Creates a new user account with the given email and login password.\n     *\n     * @private\n     * @param {string} email\n     * @param {string} loginPassword\n     * @returns {object}\n     */\n    async _signUp (email, loginPassword, name, defaultCurrency, receiveEmails, userChosenPassword) {\n      if (await this.isLoggedIn()) {\n        await this.logOut()\n      }\n      await this._doClientCredentialsGrantAccessTokenRequest(\n        'auth.signup:write'\n      )\n      const attributes = {\n        email,\n        password: loginPassword,\n        name,\n        defaultCurrency,\n        receiveEmails,\n        userChosenPassword\n      }\n      const body = toJsonApiData(toNewResourceObject('users', attributes))\n      const json = await this._doPostRequest('/v1/auth/signup', body)\n      await this.logOut()\n      return fromResourceObject(fromJsonApiData(json), 'signups')\n    }\n\n    /**\n     * [Browser only] Starts the authorization flow which allows third-party applications\n     * to request access to user resources on their behalf. This function will\n     * redirect the user's window to the Money Button's authorization flow page.\n     *\n     * @param {string} scope - scope to be requested to the user.\n     * @param {string} redirectUri - URI where the authorization response will be handled.\n     * @returns {undefined}\n     */\n    requestAuthorization (\n      scope,\n      redirectUri,\n      state = null\n    ) {\n      if (typeof scope !== 'string' || scope.length === 0) {\n        throw new Error(`Invalid scope requested: ${scope}.`)\n      }\n      if (typeof redirectUri !== 'string' || redirectUri.length === 0) {\n        throw new Error(`Invalid return URI: ${redirectUri}.`)\n      }\n      this._doAuthorizationCodeGrantAuthorizationRequest(redirectUri, scope, state)\n    }\n\n    /**\n     * [Browser only] Finishes the authorization flow started by {@link requestAuthorization}.\n     * If successful, after calling this function, the client will be able to perform requests\n     * on behalf of the user as long as they are within the scope requested when starting the\n     * authorization flow.\n     *\n     * @returns {undefined}\n     */\n    async handleAuthorizationResponse () {\n      const { error, code, state } = this._getUrlQuery()\n      const redirectUri = this._getRedirectUri()\n      if (!redirectUri) {\n        throw new Error('Required OAuth redirect URI not found in storage.')\n      }\n      await this._handleAuthorizationCodeGrantAuthorizationResponse(error, code, state, this._getState(), this._getRedirectUri())\n    }\n\n    async authorizeWithAuthFlowResponse (queryParams, expectedState, redirectUri) {\n      const { error, code, state } = queryParams\n      await this._handleAuthorizationCodeGrantAuthorizationResponse(error, code, state, expectedState, redirectUri)\n    }\n\n    /**\n     * See: https://tools.ietf.org/html/rfc6749#page-24.\n     *\n     * @private\n     * @param {string} redirectUri\n     * @param {string} scope\n     */\n    _doAuthorizationCodeGrantAuthorizationRequest (\n      redirectUri,\n      scope,\n      state = null\n    ) {\n      if (this.clientSecret !== null) {\n        throw new Error([\n          'Grant `authentication_code` can only be performed by ',\n          'a public client (that is, a client with no client secret).'\n        ].join(''))\n      }\n      if (state === null) {\n        state = uuid.v4()\n      }\n      this._setRedirectUri(redirectUri)\n      this._setState(state)\n      const authorizationUri = [\n        `${this.mbUrl}/oauth/v1/authorize`,\n        queryString.stringify({\n          response_type: 'code',\n          client_id: this.clientId,\n          redirect_uri: redirectUri,\n          scope,\n          state\n        })\n      ].join('?')\n      this._redirectToUri(authorizationUri)\n    }\n\n    /**\n     * See: https://tools.ietf.org/html/rfc6749#page-26.\n     *\n     * @private\n     */\n    async _handleAuthorizationCodeGrantAuthorizationResponse (\n      error,\n      code,\n      state,\n      expectedState,\n      redirectUri\n    ) {\n      if (error !== undefined) {\n        throw new AuthError('Authorization failed.', error.message)\n      }\n      if (code === undefined) {\n        throw new Error('Missing OAuth authorization code.')\n      }\n      if (expectedState === null || state !== expectedState) {\n        throw new Error('Invalid OAuth state.')\n      }\n      await this._doAuthorizationCodeGrantAccessTokenRequest(code, redirectUri)\n    }\n\n    /**\n     * See: https://tools.ietf.org/html/rfc6749#page-29.\n     *\n     * @private\n     */\n    async _doAuthorizationCodeGrantAccessTokenRequest (\n      code,\n      redirectUri\n    ) {\n      if (!redirectUri) {\n        throw new Error('Required OAuth redirect URI not found.')\n      }\n      await this._doAccessTokenRequest(\n        {\n          grant_type: 'authorization_code',\n          code,\n          redirect_uri: redirectUri,\n          client_id: this.clientId\n        }\n      )\n    }\n\n    /**\n     * See: https://tools.ietf.org/html/rfc6749#page-37.\n     *\n     * @private\n     */\n    async _doResourceOwnerPasswordCredentialsGrantAccessTokenRequest (\n      username,\n      password,\n      scope\n    ) {\n      await this._doAccessTokenRequest(\n        {\n          grant_type: 'password',\n          username,\n          password,\n          scope\n        },\n        this._buildBasicAuthHeaders()\n      )\n    }\n\n    /**\n     * See: https://tools.ietf.org/html/rfc6749#page-41.\n     *\n     * @private\n     */\n    async _doClientCredentialsGrantAccessTokenRequest (scope) {\n      await this._doAccessTokenRequest(\n        {\n          grant_type: 'client_credentials',\n          scope\n        },\n        this._buildBasicAuthHeaders()\n      )\n    }\n\n    /**\n     * @private\n     * @param {string} refreshToken\n     */\n    async _doRefreshAccessTokenRequest (refreshToken) {\n      const response = await fetch(`${this.mbUrl}/oauth/v1/auth-proxy/token`, {\n        method: 'POST',\n        body: JSON.stringify({\n          grant_type: 'refresh_token',\n          refresh_token: refreshToken\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      })\n\n      await this._handleAccessTokenResponse(response)\n    }\n\n    /**\n     * @private\n     */\n    _buildBasicAuthHeaders () {\n      if (this.clientSecret === null) {\n        return {}\n      }\n      const credentials = `${this.clientId}:${this.clientSecret}`\n      return {\n        Authorization: `Basic ${Buffer.from(credentials).toString('base64')}`\n      }\n    }\n\n    /**\n     * @private\n     * @param {object} body\n     * @param {object} headers\n     */\n    async _doAccessTokenRequest (body = {}, headers = {}) {\n      const res = await fetch(\n        `${this.mbUrl}/oauth/v1/token`,\n        {\n          method: 'POST',\n          body: queryString.stringify(body),\n          headers: {\n            ...headers,\n            'Content-Type': 'application/x-www-form-urlencoded'\n          }\n        }\n      )\n      await this._handleAccessTokenResponse(res)\n    }\n\n    /**\n     * @private\n     * @param {Response} res - Express.js response object.\n     */\n    async _handleAccessTokenResponse (res) {\n      const {\n        error,\n        error_description: errorDescription,\n        errors,\n        access_token: accessToken,\n        token_type: tokenType,\n        expires_in: expiresIn,\n        refresh_token: refreshToken,\n        expiration_time: expirationTime\n      } = await res.json()\n\n      if (error !== undefined && error !== null) {\n        throw new AuthError(error, errorDescription)\n      }\n      if (errors) {\n        console.error(errors)\n        throw new AuthError(errors[0], errors[0])\n      }\n      if (tokenType !== 'Bearer') {\n        throw new Error('Unexpected token type.')\n      }\n      if (accessToken !== undefined && accessToken !== null) {\n        this.setAccessToken(accessToken)\n      } else {\n        this.clearAccessToken()\n      }\n      if (expiresIn !== undefined && expiresIn !== null) {\n        const expirationTimeValue = moment().add(expiresIn, 'seconds')\n        this.setExpirationTime(expirationTimeValue.format())\n      } else {\n        this.clearExpirationTime()\n      }\n      if (expirationTime) {\n        const expirationTimeValue = moment(expirationTime)\n        this.setExpirationTime(expirationTimeValue.format())\n      }\n      if (refreshToken !== undefined && refreshToken !== null) {\n        this.setRefreshToken(refreshToken)\n      }\n    }\n\n    /**\n     * Get basic information from the OAuth client with the given identifier.\n     *\n     * @param {string} clientIdentifier\n     * @returns {object}\n     */\n    async getClientByIdentifier (clientIdentifier) {\n      const json = await this._doGetRequest(`/v1/clients/client_identifier=${clientIdentifier}`)\n      return fromResourceObject(fromJsonApiData(json), 'clients')\n    }\n\n    /**\n     * Get basic information from the OAuth app with the given oauth identifier.\n     *\n     * @param {string} oAuthIdentifier\n     * @returns {object}\n     */\n    async getAppProfileByOAuthIdentifier (oAuthIdentifier) {\n      const json = await this._doGetRequest(`/v1/application_profiles/oauth_identifier=${oAuthIdentifier}`)\n      return JsonDeserializer.deserialize(json)\n    }\n\n    /**\n     * Get basic information from the OAuth app with the given public client identifier.\n     *\n     * @param {string} oAuthIdentifier\n     * @returns {object}\n     */\n    async getAppProfileByClientIdentifier (oAuthIdentifier) {\n      const json = await this._doGetRequest(`/v1/application_profiles/client_identifier=${oAuthIdentifier}`)\n      return JsonDeserializer.deserialize(json)\n    }\n\n    /**\n     * Retrives the user with the given handle.\n     *\n     * @param {string} handle\n     * @returns {object}\n     */\n    async getUserByHandle (handle) {\n      let json = await this._doGetRequest(`/v1/users/handle/${handle}`)\n      return fromResourceObject(fromJsonApiData(json), 'users')\n    }\n\n    /**\n     * Retrives the user with the given user id.\n     *\n     * @param {string} userId\n     * @returns {object}\n     */\n    async getUser (userId) {\n      let json = await this._doGetRequest(`/v1/users/${userId}`)\n      return JsonDeserializer.deserialize(json)\n    }\n\n    /**\n     * Get coinify auth tokens for current user.\n     *\n     * @param {string} userId\n     * @returns {object}\n     */\n    async getCoinifyRefreshTokenById () {\n      let coinifyAuthResponse = await this._doGetRequest(`/v1/coinify/auth-tokens`)\n      return coinifyAuthResponse\n    }\n\n    async getCoinifyPendingOperations () {\n      let json = await this._doGetRequest(`/v1/coinify/pending-operations`)\n      return json\n    }\n\n    async registerCoinifyTrade (tradeId) {\n      let json = await this._doPostRequest(`/v1/coinify/trade`, {\n        tradeId\n      })\n      return json\n    }\n\n    /**\n     * Gets list of countries available for Coinify\n     *\n     * @returns {object}\n     */\n    async getCoinifyCountryList () {\n      let countries = await this._doGetRequest(`/v1/coinify/countries`)\n      return countries\n    }\n\n    async registerInCoinify (location) {\n      let refreshToken = await this._doPostRequest(`/v1/coinify/register`, { location })\n      return refreshToken\n    }\n\n    /**\n     * Retrives the profile of user with the given user id.\n     *\n     * @param {string} userId\n     * @returns {object}\n     */\n    async getUserProfile (userId) {\n      let json = await this._doGetRequest(`/v1/users/${userId}/profile`)\n      return JsonDeserializer.deserialize(json)\n    }\n\n    /**\n     * Updates the user with the given user id.\n     *\n     * @param {string} userId\n     * @param {object} attributes\n     * @returns {object}\n     */\n    async updateUser (userId, attributes = {}) {\n      const body = UserSerializer.serialize(attributes)\n      const json = await this._doPatchRequest(`/v1/users/${userId}`, body)\n      this._clearCurrentUser()\n      return JsonDeserializer.deserialize(json)\n    }\n\n    async setOnboardCompleted () {\n      const json = await this._doPatchRequest(`/v2/me/profile/onboard-completed`, {})\n      this._clearCurrentUser()\n      return json\n    }\n\n    async setMnemonicBacked () {\n      const json = await this._doPatchRequest(`/v2/me/profile/mnemonic-backed`, {})\n      this._clearCurrentUser()\n      return json\n    }\n\n    /**\n     * Retrives the transaction history of the user with the given user id.\n     *\n     * @param {string} userId\n     * @param {object} query\n     * @returns {object}\n     */\n    async getUserTransactionHistory (query = {}) {\n      return this._doGetRequest(`/v2/me/payments/history`, query)\n    }\n\n    /**\n     * Retrives the OAuth clients of the user with the given user id.\n     *\n     * @param {string} userId\n     * @param {object} query\n     * @returns {object}\n     */\n    async getUserClients (userId, query = {}) {\n      const json = await this._doGetRequest(\n        `/v1/users/${userId}/clients`,\n        query\n      )\n      return fromResourceObjectsOfType(fromJsonApiData(json), 'clients')\n    }\n\n    /**\n     * Retrives paginated utxos for the specified user\n     *\n     * @param {string} userId\n     * @returns {list}\n     */\n    async getUserUtxos (userId, query = {}) {\n      const json = await this._doGetRequest(\n        `/v1/users/${userId}/utxos`,\n        query\n      )\n      return fromResourceObjectsOfType(fromJsonApiData(json), 'utxos')\n    }\n\n    /**\n     * Retrives an specific utxo for a user\n     *\n     * @param {string} userId\n     * @param {string} utxoId\n     * @returns {list}\n     */\n    async getUserUtxoById (userId, utxoId, query = {}) {\n      const json = await this._doGetRequest(\n        `/v1/users/${userId}/utxos/${utxoId}`,\n        query\n      )\n      return fromResourceObject(fromJsonApiData(json), 'utxos')\n    }\n\n    /**\n     * Retrives all the applications belonging to the specified user.\n     *\n     * @param {string} userId\n     * @returns {list}\n     */\n    async getUserApplications (userId, query = {}) {\n      const json = await this._doGetRequest(\n        `/v1/users/${userId}/applications`,\n        query\n      )\n      return fromResourceObjectsOfType(fromJsonApiData(json), 'applications')\n    }\n\n    async getUserApplicationById (userId, appId, query = {}) {\n      const json = await this._doGetRequest(\n        `/v1/users/${userId}/applications/${appId}`,\n        query\n      )\n      return fromResourceObject(fromJsonApiData(json), 'applications')\n    }\n\n    async createUserApplication (userId, attributes) {\n      const body = toJsonApiData(toNewResourceObject('applications', attributes))\n      const json = await this._doPostRequest(\n        `/v1/users/${userId}/applications`,\n        body\n      )\n      return fromResourceObject(fromJsonApiData(json), 'applications')\n    }\n\n    /**\n     * Creates a new swipe permission.\n     *\n     * @param {string} attributes.amount Max amount to authorized.\n     * @param {string} attributes.currency Currency of the authorized amount.\n     */\n    async createUserSpentAuthorization (attributes) {\n      const body = SwipePermissionSerializer.serialize(attributes)\n      const json = await this._doPostRequest(\n        `/v1/swipe_permissions`,\n        body\n      )\n      return JsonDeserializer.deserialize(json)\n    }\n\n    /**\n     * Returns a list of swipe permissions associates with the current user.\n     */\n    async getCurrentUserSwipePermissions () {\n      const json = await this._doGetRequest('/v1/swipe_permissions')\n      return JsonDeserializer.deserialize(json)\n    }\n\n    /**\n     * Get the amount left for an specific permission.\n     *\n     * @param {string} token IMB permission token\n     */\n    async getSwipePermissionAmountLeft (token) {\n      const json = await this._doPostRequest(`/v1/swipe_permissions/amount-left`, { authToken: token })\n      return JsonDeserializer.deserialize(json)\n    }\n\n    /**\n     * Get the info for an specific swipe permission.\n     *\n     * @param {string} id ID of the permission\n     */\n    async getCurrentUserSwipePermissionById (id) {\n      const json = await this._doGetRequest(`/v1/swipe_permissions/${id}`)\n      return JsonDeserializer.deserialize(json)\n    }\n\n    async updateCurrentUserSwipePermissionById (id, attributes) {\n      const reqBody = SwipePermissionSerializer.serialize(attributes)\n      const jsonResponse = await this._doPatchRequest(`/v1/swipe_permissions/${id}`, reqBody)\n      return JsonDeserializer.deserialize(jsonResponse)\n    }\n\n    /**\n     * Deletes an specific swipe permission.\n     *\n     * @param {string} id ID of the permission\n     */\n    async deleteCurrentUserSwipePermissionById (id) {\n      await this._doDeleteRequest(`/v1/swipe_permissions/${id}`)\n    }\n\n    /**\n     * Creates a new authorized payment.\n     *\n     * @param {string} attributes.amount Max amount to authorized.\n     * @param {string} attributes.currency Currency of the authorized amount.\n     */\n    async createAuthorizedPayment (authorization, paymentAttributes, paymentOutputs, cryptoOperations) {\n      const body = AuthorizedPaymentSerializer.serialize({\n        authorization, paymentAttributes, paymentOutputs, cryptoOperations\n      })\n      const json = await this._doPostRequest(\n        `/v1/swipe_permissions/make-payment`,\n        body\n      )\n      // return JsonDeserializer.deserialize(json)\n      return json\n    }\n\n    async updateUserApplication (userId, appId, attributes) {\n      const body = toJsonApiData(toResourceObject(appId, 'applications', attributes))\n      const json = await this._doPatchRequest(\n        `/v1/users/${userId}/applications/${appId}`,\n        body\n      )\n      return fromResourceObject(fromJsonApiData(json), 'applications')\n    }\n\n    /**\n     * Creates an OAuth client for the user with the given user id.\n     *\n     * @param {string} userId\n     * @param {object} attributes\n     * @returns {object}\n     */\n    async createUserClient (userId, attributes) {\n      let body = toJsonApiData(toNewResourceObject('clients', attributes))\n      const json = await this._doPostRequest(`/v1/users/${userId}/clients`, body)\n      return fromResourceObject(fromJsonApiData(json), 'clients')\n    }\n\n    /**\n     * Updates an OAuth client for the user with the given user id.\n     *\n     * @param {string} userId\n     * @param {string} clientId\n     * @param {object} attributes\n     * @returns {object}\n     */\n    async updateUserClient (userId, clientId, attributes = {}) {\n      const body = toJsonApiData(\n        toResourceObject(clientId, 'clients', attributes)\n      )\n      await this._doPatchRequest(\n        `/v1/users/${userId}/clients/${clientId}`,\n        body\n      )\n    }\n\n    /**\n     * Retrives the handles of the user with the given user id.\n     *\n     * @param {string} userId\n     * @param {object} query\n     * @returns {object}\n     */\n    async getUserHandles (userId, query = {}) {\n      const json = await this._doGetRequest(\n        `/v1/users/${userId}/handles`,\n        query\n      )\n      return fromResourceObjectsOfType(fromJsonApiData(json), 'handles')\n    }\n\n    /**\n     * Update a handle with the proper data\n     *\n     * @param {string} handleId\n     * @param {object} attributes\n     * @returns {object}\n     */\n    async updateUserHandle (userId, handleId, attributes = {}) {\n      const body = toJsonApiData(toResourceObject(handleId, 'handles', attributes))\n      const json = await this._doPatchRequest(\n        `/v1/users/${userId}/handles/${handleId}`,\n        body\n      )\n      return fromResourceObject(fromJsonApiData(json), 'handles')\n    }\n\n    /**\n     * Retrives the handles of the user with the given user id.\n     *\n     * @param {string} userId\n     * @param {object} query\n     * @returns {object}\n     */\n    async checkHandleAvailability (search, query = {}) {\n      let body = toJsonApiData(toNewResourceObject('handleChecks', { search }))\n      const json = await this._doPostRequest(\n        `/v1/handles/check`,\n        body,\n        query\n      )\n      return fromResourceObject(fromJsonApiData(json), 'handleAvailabilities')\n    }\n\n    /**\n     * Creates a handle for the user with the given user id.\n     *\n     * @param {string} userId\n     * @param {object} attributes\n     * @returns {object}\n     */\n    async createUserHandle (userId, attributes) {\n      let body = toJsonApiData(toNewResourceObject('handles', attributes))\n      const json = await this._doPostRequest(`/v1/users/${userId}/handles`, body)\n      return fromResourceObject(fromJsonApiData(json), 'handles')\n    }\n\n    /**\n     * Retrives the wallet with the given wallet id for the user with\n     * the given user id.\n     *\n     * @param {string} userId\n     * @param {string} walletId\n     * @returns {object}\n     */\n    async getUserWallet (userId, walletId) {\n      let data = this.getStoredWalletData(userId, walletId)\n      if (data == null) {\n        const json = await this._doGetRequest(\n          `/v1/users/${userId}/wallets/${walletId}`\n        )\n        data = fromResourceObject(fromJsonApiData(json), 'wallets')\n        this.saveWalletData(userId, walletId, data)\n      }\n      return data\n    }\n\n    /**\n     * Retrives the wallets of the user with the given user id.\n     *\n     * @param {string} userId\n     * @returns {object}\n     */\n    async getUserWallets (userId) {\n      let json = await this._doGetRequest(`/v1/users/${userId}/wallets/`)\n      return fromResourceObjectsOfType(fromJsonApiData(json), 'wallets')\n    }\n\n    /**\n     * Creates a wallet for the user with the given user id.\n     *\n     * @param {string} userId\n     * @param {object} attributes\n     * @returns {object}\n     */\n    async createUserWallet (userId, attributes) {\n      let body = toJsonApiData(toNewResourceObject('wallets', attributes))\n      let json = await this._doPostRequest(`/v1/users/${userId}/wallets`, body)\n      this._clearCurrentUser()\n      return fromResourceObject(fromJsonApiData(json), 'wallets')\n    }\n\n    /**\n     * Retrieves the balance from the user with given user id.\n     *\n     * @param {string} userId\n     * @returns {object}\n     */\n    async getBalance (userId) {\n      const json = await this._doGetRequest(`/v1/users/${userId}/balance`)\n      return JsonDeserializer.deserialize(json)\n    }\n\n    /**\n     * Retrieves assets balances for active user\n     *\n     * @param {string} userId\n     * @returns {object}\n     */\n    getWalletBalances (walletId = 'active') {\n      return this._doGetRequest(`/v2/me/wallets/${walletId}/balances`)\n    }\n\n    /**\n     * Retrives a recieve address for the user with the given user id.\n     *\n     * @param {string} userId\n     * @param {string} walletId\n     * @returns {object}\n     */\n    async getReceiveAddress (userId, walletId) {\n      let json = await this._doPostRequest(\n        `/v1/users/${userId}/wallets/${walletId}/receive_address`\n      )\n      let { address } = fromResourceObject(fromJsonApiData(json), 'addresses')\n      return address\n    }\n\n    /**\n     * Retrives a signed receive address for the user with the given user id.\n     *\n     * @param {string} userId\n     * @param {string} walletId\n     * @returns {object}\n     */\n    async getReceiveAddressSignature (userId, walletId) {\n      let json = await this._doPostRequest(\n        `/v1/users/${userId}/wallets/${walletId}/receive_signed_address`\n      )\n      let { addressSignature, address } = fromResourceObject(fromJsonApiData(json), 'addresses')\n      return { addressSignature, address }\n    }\n\n    /**\n     * Converts a (curreny,amount) pair into the given user's default currency.\n     *\n     * @param {string} userId\n     * @param {object} attributes\n     * @returns {object}\n     */\n    async getCurrencyAmount (userId, attributes) {\n      const body = toJsonApiData(toNewResourceObject('currency', attributes))\n      const json = await this._doPostRequest(\n        `/v1/users/${userId}/currency`,\n        body\n      )\n      const { amount, currency } = fromResourceObject(\n        fromJsonApiData(json),\n        'currency'\n      )\n      return { amount, currency }\n    }\n\n    /**\n     * Retrives the balance for the wallet with the given wallet id,\n     * belonging to the user with the given user id.\n     *\n     * @param {string} userId\n     * @param {string} walletId\n     * @returns {object}\n     */\n    async getWalletBalance (userId, walletId) {\n      const json = await this._doGetRequest(\n        `/v1/users/${userId}/wallets/${walletId}/balance`\n      )\n      return fromResourceObject(fromJsonApiData(json), 'amounts')\n    }\n\n    /**\n     * Updates the wallet with the given wallet id, belonging to the user\n     * with the given user id.\n     *\n     * @param {string} userId\n     * @param {string} walletId\n     * @param {object} attributes\n     * @returns {object}\n     */\n    async updateWallet (userId, walletId, attributes) {\n      const body = toJsonApiData(\n        toResourceObject(walletId, 'wallets', attributes)\n      )\n      await this._doPatchRequest(\n        `/v1/users/${userId}/wallets/${walletId}`,\n        body\n      )\n    }\n\n    /**\n     * Retrieves the payments from the user with the given user id.\n     *\n     * @param {string} userId\n     * @param {object} paginate\n     * @returns {object}\n     */\n    async getUserPayments (userId, paginate) {\n      const json = await this._doGetRequest(\n        `/v1/users/${userId}/payments?${this._paginateUri(paginate)}`\n      )\n      return {\n        pages: json.meta['total-pages'],\n        payments: json.data.map(payment =>\n          fromResourceObject(payment, 'payments')\n        )\n      }\n    }\n\n    /**\n     * Query for a list of payments belonging to the user or app logged in in the client.\n     *\n     * @param {object} query Query parameters\n     * @param {object} query.limit Pagination. Max amount of record returned.\n     * @param {object} query.offset Pagination offset.\n     */\n    async getOwnPayments (query) {\n      const json = await this._doGetRequest(\n        `/v1/payments`,\n        query\n      )\n      return JsonDeserializer.deserialize(json)\n    }\n\n    /**\n     * Query a payment by id.\n     *\n     * @param {number} paymentId\n     */\n    async getPaymentById (paymentId) {\n      const json = await this._doGetRequest(\n        `/v1/payments/${paymentId}`\n      )\n      return JsonDeserializer.deserialize(json)\n    }\n\n    /**\n     * @private\n     * @returns {string}\n     */\n    _paginateUri ({ number, size, sort }) {\n      // NOTE: query-string does not support the nesting format used in JsonApi\n      // https://github.com/sindresorhus/query-string#nesting\n      // http://jsonapi.org/examples/#pagination\n      // http://jsonapi.org/format/#fetching-pagination\n      const url = []\n      if (number) url.push(`page[number]=${number}`)\n      if (size) url.push(`page[size]=${size}`)\n      if (sort) url.push(`sort=${sort}`)\n      return url.join('&')\n    }\n\n    /**\n     * Creates a payment for the user with the given user id to the specified payment\n     * outputs.\n     *\n     * @param {string} userId\n     * @param {object} attributes\n     * @param {array} paymentOutputs\n     * @returns {object}\n     */\n    async createUserPayment (userId, attributes, paymentOutputs, cryptoOperations = []) {\n      return this._doPostRequest(\n        `/v2/me/payments`,\n        {\n          ...attributes, paymentOutputs, cryptoOperations\n        }\n      )\n    }\n\n    /**\n     * Estimates the amount to be spend in a payment to show it in the button.\n     *\n     * @param {string} userId\n     * @param {object} attributes\n     * @param {array} paymentOutputs\n     * @returns {object}\n     */\n    async estimatePaymentAmount (userId, attributes, paymentOutputs, cryptoOperations = []) {\n      return this._doPostRequest(\n        `/v2/me/payments/estimate`,\n        {\n          ...attributes, paymentOutputs, cryptoOperations\n        }\n      )\n    }\n\n    /**\n     * Retrives the payment with the given payment id, belonging to the user with\n     * the given user id.\n     *\n     * @param {string} userId\n     * @param {string} paymentId\n     * @returns {object}\n     */\n    async getUserPayment (paymentId) {\n      return this._doGetRequest(`/v2/me/payments/${paymentId}`)\n    }\n\n    /**\n     * Creates a deposit for the user with the given id.\n     *\n     * @param {string} userId\n     * @param {object} attributes\n     * @returns {object}\n     */\n    async createUserDeposit (userId, attributes) {\n      const body = toJsonApiData(toNewResourceObject('deposits', attributes))\n      const json = await this._doPostRequest(\n        `/v1/users/${userId}/deposits`,\n        body\n      )\n      return fromResourceObject(fromJsonApiData(json), 'deposits')\n    }\n\n    /**\n     * Retrives the deposit with the given deposit id, belonging to the user with\n     * the given user id.\n     *\n     * @param {string} userId\n     * @param {string} depositId\n     * @returns {object}\n     */\n    async getUserDeposit (userId, depositId) {\n      const json = await this._doGetRequest(\n        `/v1/users/${userId}/deposits/${depositId}`\n      )\n      return fromResourceObject(fromJsonApiData(json), 'deposits')\n    }\n\n    /**\n     *\n     * @param {string} walletId\n     * @returns {object}\n     */\n    async createUserRecoverFullAmountPayment (walletId) {\n      return this._doPostRequest(`/v2/me/wallets/${walletId}/recover-full-amount`)\n    }\n\n    /**\n     * Broadcasts the given payment. It must include a fully signed transaction.\n     *\n     * @param {Payment} payment\n     * @returns {object}\n     */\n    async broadcastPayment ({ id, ...payment }) {\n      const body = payment\n      const json = await this._doPatchRequest(\n        `/v2/payments/${id}/broadcast`,\n        body\n      )\n      return json\n    }\n\n    /**\n     * Retrieves the list of supported cryptocurrencies.\n     *\n     * @param {object} query\n     * @returns {array}\n     */\n    async getSupportedCryptocurrencies (query = {}) {\n      const json = await this._doGetRequest('/v1/currencies/crypto', query)\n      return fromResourceObjectsOfType(fromJsonApiData(json), 'currencies')\n    }\n\n    /**\n     * Retrieves the list of supported fiat currencies.\n     *\n     * @param {object} query\n     * @returns {array}\n     */\n    async getSupportedFiatCurrencies (query = {}) {\n      const json = await this._doGetRequest('/v1/currencies/fiat', query)\n      return fromResourceObjectsOfType(fromJsonApiData(json), 'currencies')\n    }\n\n    /**\n     * Looks up ui data for given user.\n     *\n     * @param {String} userId\n     */\n    async fetchUiData (userId) {\n      const json = await this._doGetRequest(`/v1/users/${userId}/ui-data`)\n      return fromResourceObject(fromJsonApiData(json), 'ui-data')\n    }\n\n    /**\n     * Updates ui data for given user.\n     *\n     * @param {String} userId\n     * @param {object} data\n     */\n    async updateUiData (userId, data) {\n      const json = await this._doPatchRequest(`/v1/users/${userId}/ui-data`,\n        toJsonApiData(toNewResourceObject('ui-data', data))\n      )\n      return fromResourceObject(fromJsonApiData(json), 'ui-data')\n    }\n\n    /**\n     * Creates an asset definition for a user\n     *\n     * @param {string} protocol\n     * @param {string} name\n     * @param {number} initialSupply\n     * @param {string} avatar\n     * @param {string} paymailAlias\n     * @param {string} paymailDomain\n     * @param {string} url\n     */\n    createAsset (protocol, name, initialSupply, avatar, paymailAlias, paymailDomain, url) {\n      return this._doPostRequest('/v2/me/assets', {\n        protocol,\n        name,\n        initialSupply,\n        avatar,\n        paymailAlias,\n        paymailDomain,\n        url\n      })\n    }\n\n    /**\n     * Lists a user's assets\n     *\n     */\n    getUserAssets () {\n      return this._doGetRequest('/v2/me/assets')\n    }\n\n    /**\n     * Adds a domain to the account\n     *\n     * @param {string} domain\n     */\n    createUserDomain (domain) {\n      return this._doPostRequest('/v2/me/domains', {\n        domain\n      })\n    }\n\n    /**\n     * Validates paymail DNS configuration for a domain\n     *\n     * @param {string} id\n     */\n    validateUserDomain (id) {\n      return this._doPostRequest(`/v2/me/domains/${id}/validate`)\n    }\n\n    /**\n     * Lists a user's domains\n     *\n     */\n    getUserDomains () {\n      return this._doGetRequest('/v2/me/domains')\n    }\n\n    /**\n     * Remove a user domain\n     *\n     */\n    deleteUserDomain (id) {\n      return this._doDeleteRequest(`/v2/me/domains/${id}`)\n    }\n\n    /**\n     * @private\n     * @param {string} endpoint - REST API relative endpoint.\n     * @param {object} query - URL query parameters.\n     * @param {string} accessToken - auth API access token\n     * @returns {object}\n     */\n    async _doGetRequest (endpoint, query = {}, accessToken = null) {\n      let opts = {\n        method: 'GET'\n      }\n      return this._doRequest(endpoint, opts, query, accessToken)\n    }\n\n    /**\n     * @private\n     * @param {string} endpoint - REST API relative endpoint.\n     * @param {object} query - URL query parameters.\n     * @param {string} accessToken - auth API access token\n     * @returns {object}\n     */\n    async _doDeleteRequest (endpoint, query = {}, accessToken = null) {\n      let opts = {\n        method: 'DELETE'\n      }\n      return this._doRequest(endpoint, opts, query, accessToken)\n    }\n\n    /**\n     * @private\n     * @param {string} endpoint - REST API relative endpoint.\n     * @param {object} body - fetch request's body.\n     * @param {object} query - URL query parameters.\n     * @param {string} accessToken - auth API access token\n     * @returns {object}\n     */\n    async _doPostRequest (endpoint, body = {}, query = {}, accessToken = null) {\n      let opts = {\n        method: 'POST',\n        body: JSON.stringify(body)\n      }\n      return this._doRequest(endpoint, opts, query, accessToken)\n    }\n\n    /**\n     * @private\n     * @param {string} endpoint - REST API relative endpoint.\n     * @param {object} body - fetch request's body.\n     * @param {string} accessToken - auth API access token\n     * @returns {object}\n     */\n    async _doPatchRequest (endpoint, body = {}, accessToken = null) {\n      let opts = {\n        method: 'PATCH',\n        body: JSON.stringify(body)\n      }\n      return this._doRequest(endpoint, opts, {}, accessToken)\n    }\n\n    /**\n     * @private\n     * @param {string} endpoint - REST API relative endpoint.\n     * @param {object} body - fetch request's body.\n     * @param {string} accessToken - auth API access token\n     * @returns {object}\n     */\n    async _doPutRequest (endpoint, body = {}, accessToken = null) {\n      let opts = {\n        method: 'PUT',\n        body: JSON.stringify(body)\n      }\n      return this._doRequest(endpoint, opts, {}, accessToken)\n    }\n\n    /**\n     *\n     * @param {string} endpoint - REST API relative endpoint.\n     * @param {object} opts - fetch request options.\n     * @param {object} query - URL query parameters.\n     * @param {string} accessToken - auth API access token\n     * @returns {object}\n     */\n    async _doRequest (endpoint, opts = {}, query = {}, accessToken = null) {\n      const url = this._appendQuery(`${this.mbUrl}/api${endpoint}`, query)\n      const contentType = endpoint.includes('v1') ? 'application/vnd.api+json' : 'application/json'\n\n      const headers = {\n        'Accept': contentType,\n        'Content-Type': contentType\n      }\n      accessToken = accessToken || await this.getValidAccessToken()\n\n      if (accessToken !== null) {\n        headers['Authorization'] = `Bearer ${accessToken}`\n      }\n      const res = await fetch(url, { ...opts, headers })\n      let json = null\n\n      try {\n        json = await res.json()\n      } catch (e) {\n        throw new RestError(res.status, 'api error', 'api error')\n      }\n\n      if (json.errors instanceof Array) {\n        let error = json.errors[0]\n        if (error.status) {\n          let { status, title, detail } = error\n          throw new RestError(status, title, detail)\n        }\n        throw new Error(error.title)\n      } else if (!res.ok) {\n        if (res.status === 400) {\n          console.info('API returned a validation failure', json)\n          throw new RestError(res.status, 'API Validation Error', `There seems to be a problem with Money Button's configuration`)\n        }\n        throw new RestError(res.status, 'api error', 'api error')\n      }\n\n      return json\n    }\n\n    /**\n     * @private\n     * @param {string} url - base URL where query will be appended.\n     * @param {object} query - URL query parameters.\n     * @returns {string}\n     */\n    _appendQuery (url, query = {}) {\n      if (Object.keys(query).length === 0) {\n        return url\n      }\n      const { page, ...queryWithoutPage } = query\n\n      if (page !== undefined) {\n        for (const key in page) {\n          queryWithoutPage[`page[${key}]`] = page[key]\n        }\n      }\n\n      return `${url}?${queryString.stringify(queryWithoutPage, { arrayFormat: 'bracket' })}`\n    }\n\n    /**\n    *\n    * Web location utilities.\n    *\n    */\n\n    /**\n     *\n     */\n    _getUrlQuery () {\n      return queryString.parse(webLocation.search)\n    }\n\n    /**\n     *\n     * @param {string} uri - URI where the browser will be redirected to.\n     */\n    _redirectToUri (uri) {\n      webLocation.href = uri\n    }\n\n    /**\n    *\n    * Web storage utilities.\n    *\n    */\n\n    /**\n     * @private\n     * @returns {string}\n     */\n    _getRedirectUri () {\n      return webStorage.getItem(OAUTH_REDIRECT_URI_KEY)\n    }\n\n    /**\n     * @private\n     * @param {string} redirectUri - OAuth redirect URI from authorization grant flow.\n     * @returns {undefined}\n     */\n    _setRedirectUri (redirectUri) {\n      webStorage.setItem(OAUTH_REDIRECT_URI_KEY, redirectUri)\n    }\n\n    /**\n     * @private\n     * @returns {undefined}\n     */\n    _clearRedirectUri () {\n      webStorage.removeItem(OAUTH_REDIRECT_URI_KEY)\n    }\n\n    /**\n     * @private\n     * @returns {undefined}\n     */\n    _getState () {\n      return webStorage.getItem(OAUTH_STATE_KEY)\n    }\n\n    /**\n     * @private\n     * @param {string} state - OAuth state from authorization grant flow.\n     * @returns {undefined}\n     */\n    _setState (state) {\n      webStorage.setItem(OAUTH_STATE_KEY, state)\n    }\n\n    /**\n     * @private\n     * @returns {undefined}\n     */\n    _clearState () {\n      webStorage.removeItem(OAUTH_STATE_KEY)\n    }\n\n    /**\n     * Get information of a user wallet from the local storage cache.\n     *\n     * @param {string} userId\n     * @param {string} walletId\n     */\n    getStoredWalletData (userId, walletId) {\n      const rawData = webStorage.getItem(`${STORAGE_NAMESPACE}:${userId}:${walletId}:wallet_data`)\n      try {\n        return JSON.parse(rawData)\n      } catch (e) {\n        return null\n      }\n    }\n\n    /**\n     * Stores wallet data into localStorage for cache.\n     *\n     * @param {string} userId\n     * @param {string} walletId\n     * @param {string} walletData\n     */\n    saveWalletData (userId, walletId, walletData) {\n      const dataToSave = JSON.stringify(walletData)\n      const key = `${STORAGE_NAMESPACE}:${userId}:${walletId}:wallet_data`\n      webStorage.setItem(key, dataToSave)\n    }\n\n    /**\n     *\n     * @param {*} key\n     * @param {*} message\n     * @returns\n     */\n    async _hashPassword (plainPassword) {\n      return MoneyButtonClient._computeHmac256(LOGIN_PASSWORD_HMAC_KEY, plainPassword)\n    }\n\n    /**\n     * Retrieve internal cache of current user\n     *\n     * @returns {object}\n     */\n    async _getCurrentUser () {\n      if (this._currentUser === null) {\n        const { id } = await this.getIdentity()\n        const user = await this.getUser(id)\n        this._currentUser = user\n      }\n      return this._currentUser\n    }\n\n    /**\n     * Clears internal cache for current user.\n     */\n    _clearCurrentUser () {\n      this._currentUser = null\n    }\n\n    /**\n     * Retrieves the currently-set access token.\n     *\n     * @returns {string}\n     */\n    getAccessToken () {\n      return webStorage.getItem(OAUTH_ACCESS_TOKEN_KEY)\n    }\n\n    /**\n     * Sets the given access token.\n     *\n     * @param {string} accessToken - auth API access token\n     * @returns {undefined}\n     */\n    setAccessToken (accessToken) {\n      webStorage.setItem(OAUTH_ACCESS_TOKEN_KEY, accessToken)\n    }\n\n    /**\n     * Clears the currently-set access token.\n     *\n     * @returns {undefined}\n     */\n    clearAccessToken () {\n      webStorage.removeItem(OAUTH_ACCESS_TOKEN_KEY)\n    }\n\n    /**\n     * Returns the currently-set token's expiration time in the following\n     * format: 'YYYY-MM-DDTHH:mm:ssZ'.\n     * For example, '2018-10-25T13:08:58-03:00'.\n     *\n     * @returns {string}\n     */\n    getExpirationTime () {\n      return webStorage.getItem(OAUTH_EXPIRATION_TIME_KEY)\n    }\n\n    /**\n     * Sets the currently-set token's expiration time. The argument must be\n     * in the following format: 'YYYY-MM-DDTHH:mm:ssZ'.\n     * For example, '2018-10-25T13:08:58-03:00'.\n     *\n     * @param {string} expirationTime\n     * @returns {undefined}\n     */\n    setExpirationTime (expirationTime) {\n      webStorage.setItem(OAUTH_EXPIRATION_TIME_KEY, expirationTime)\n    }\n\n    /**\n     * Clears the currently-set access token's expiration time.\n     *\n     * @returns {undefined}\n     */\n    clearExpirationTime () {\n      webStorage.removeItem(OAUTH_EXPIRATION_TIME_KEY)\n    }\n\n    /**\n     * Retrieves the currently-set refresh token.\n     *\n     * @returns {string}\n     */\n    getRefreshToken () {\n      return webStorage.getItem(OAUTH_REFRESH_TOKEN_KEY)\n    }\n\n    getRefreshTokenStorageKey () {\n      return OAUTH_REFRESH_TOKEN_KEY\n    }\n\n    /**\n     * Sets the given refresh token.\n     *\n     * @param {string} refreshToken - auth API refresh token\n     * @returns {undefined}\n     */\n    setRefreshToken (refreshToken) {\n      webStorage.setItem(OAUTH_REFRESH_TOKEN_KEY, refreshToken)\n    }\n\n    /**\n     * Clears the currently-set refresh token.\n     * @returns {undefined}\n     */\n    clearRefreshToken () {\n      webStorage.removeItem(OAUTH_REFRESH_TOKEN_KEY)\n    }\n    /**\n    *\n    * Web crypto utilities.\n    *\n    */\n\n    /**\n     * @private\n     * @param {string} key - HMAC key.\n     * @param {string} message- HMAC message.\n     * @returns {string}\n     */\n    static async _computeHmac256 (key, message) {\n      const hash = sha256.hmac(\n        Buffer.from(key),\n        Buffer.from(message)\n      )\n      return Buffer.from(hash).toString('hex')\n    }\n  }\n\n  return MoneyButtonClient\n}\n","import Window from 'window'\nimport localStorage from 'localstorage-memory'\n\nimport AuthError from './auth-error'\nimport getMoneyButtonClient from './get-money-button-client'\nimport RestError from './rest-error'\n\nconst MoneyButtonClient = getMoneyButtonClient(\n  localStorage,\n  new Window().location\n)\n\nexport {\n  MoneyButtonClient,\n  AuthError,\n  RestError\n}\n"],"names":["AuthError","constructor","title","detail","message","undefined","RestError","status","MB_URL","LOGIN_PASSWORD_HMAC_KEY","STORAGE_NAMESPACE","OAUTH_REDIRECT_URI_KEY","join","OAUTH_STATE_KEY","OAUTH_ACCESS_TOKEN_KEY","OAUTH_EXPIRATION_TIME_KEY","OAUTH_REFRESH_TOKEN_KEY","APP_REFRESH_STRATEGY","DEFAULT_REFRESH_STRATEGY","UserSerializer","SwipePermissionSerializer","AuthorizedPaymentSerializer","jsonSerializers","getMoneyButtonClient","webStorage","webLocation","Error","MoneyButtonClient","clientId","clientSecret","mbUrl","refreshStrategy","_currentUser","logIn","email","password","loginPassword","_computeHmac256","_clearCurrentUser","_logIn","logInAsApp","_doClientCredentialsGrantAccessTokenRequest","isLoggedIn","logOut","_doResourceOwnerPasswordCredentialsGrantAccessTokenRequest","logError","data","_doPostRequest","accessToken","getValidAccessToken","getAccessToken","moment","isBefore","getExpirationTime","refreshToken","getRefreshToken","_doRefreshAccessTokenRequest","err","fetch","method","headers","authorization","body","JSON","stringify","refresh_token","Array","from","length","keys","map","i","key","filter","startsWith","forEach","removeItem","changeEmail","_doPutRequest","resendEmailVerification","resendEmailChangeRequestVerification","userId","confirmEmailVerification","result","createReEncryptedWallet","encryptedMnemonic","walletId","getReEncryptedWallets","_doGetRequest","getFeatureFlags","getIdentity","json","fromResourceObject","fromJsonApiData","whoAmI","loggedIn","currentUser","_getCurrentUser","user","changePassword","xpub","language","toJsonApiDataIncluding","toNewResourceObject","resetPassword","forceCreate","walletLanguage","query","sendPasswordReset","attributes","toJsonApiData","signUp","name","receiveEmails","defaultCurrency","passwordAlreadySet","deleteAccount","updateRefreshToken","split","newRefreshToken","setRefreshToken","assertNewRefreshTokenVersion","onOldVersion","_signUp","userChosenPassword","requestAuthorization","scope","redirectUri","state","_doAuthorizationCodeGrantAuthorizationRequest","handleAuthorizationResponse","error","code","_getUrlQuery","_getRedirectUri","_handleAuthorizationCodeGrantAuthorizationResponse","_getState","authorizeWithAuthFlowResponse","queryParams","expectedState","uuid","v4","_setRedirectUri","_setState","authorizationUri","queryString","response_type","client_id","redirect_uri","_redirectToUri","_doAuthorizationCodeGrantAccessTokenRequest","_doAccessTokenRequest","grant_type","username","_buildBasicAuthHeaders","response","_handleAccessTokenResponse","credentials","Authorization","Buffer","toString","res","error_description","errorDescription","errors","access_token","token_type","tokenType","expires_in","expiresIn","expiration_time","expirationTime","console","setAccessToken","clearAccessToken","expirationTimeValue","add","setExpirationTime","format","clearExpirationTime","getClientByIdentifier","clientIdentifier","getAppProfileByOAuthIdentifier","oAuthIdentifier","JsonDeserializer","deserialize","getAppProfileByClientIdentifier","getUserByHandle","handle","getUser","getCoinifyRefreshTokenById","coinifyAuthResponse","getCoinifyPendingOperations","registerCoinifyTrade","tradeId","getCoinifyCountryList","countries","registerInCoinify","location","getUserProfile","updateUser","serialize","_doPatchRequest","setOnboardCompleted","setMnemonicBacked","getUserTransactionHistory","getUserClients","fromResourceObjectsOfType","getUserUtxos","getUserUtxoById","utxoId","getUserApplications","getUserApplicationById","appId","createUserApplication","createUserSpentAuthorization","getCurrentUserSwipePermissions","getSwipePermissionAmountLeft","token","authToken","getCurrentUserSwipePermissionById","id","updateCurrentUserSwipePermissionById","reqBody","jsonResponse","deleteCurrentUserSwipePermissionById","_doDeleteRequest","createAuthorizedPayment","paymentAttributes","paymentOutputs","cryptoOperations","updateUserApplication","toResourceObject","createUserClient","updateUserClient","getUserHandles","updateUserHandle","handleId","checkHandleAvailability","search","createUserHandle","getUserWallet","getStoredWalletData","saveWalletData","getUserWallets","createUserWallet","getBalance","getWalletBalances","getReceiveAddress","address","getReceiveAddressSignature","addressSignature","getCurrencyAmount","amount","currency","getWalletBalance","updateWallet","getUserPayments","paginate","_paginateUri","pages","meta","payments","payment","getOwnPayments","getPaymentById","paymentId","number","size","sort","url","push","createUserPayment","estimatePaymentAmount","getUserPayment","createUserDeposit","getUserDeposit","depositId","createUserRecoverFullAmountPayment","broadcastPayment","getSupportedCryptocurrencies","getSupportedFiatCurrencies","fetchUiData","updateUiData","createAsset","protocol","initialSupply","avatar","paymailAlias","paymailDomain","getUserAssets","createUserDomain","domain","validateUserDomain","getUserDomains","deleteUserDomain","endpoint","opts","_doRequest","_appendQuery","contentType","includes","e","ok","info","Object","page","queryWithoutPage","arrayFormat","parse","uri","href","getItem","setItem","_clearRedirectUri","_clearState","rawData","walletData","dataToSave","_hashPassword","plainPassword","getRefreshTokenStorageKey","clearRefreshToken","hash","sha256","hmac","localStorage","Window"],"mappings":"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"}